<?xml version="1.0"?>
<configuration>
	<configSections>
		<section name="loggingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
		<section name="exceptionHandling" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
		<section name="dataConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings, Microsoft.Practices.EnterpriseLibrary.Data, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
		<section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration"/>
	</configSections>
	<!--#########################################################################################-->
	<!-- Section de configuration pour les variables d'application Web -->
	<!--#########################################################################################-->
	<!--#########################################################################################-->
	<!-- Section de configuration pour les logs -->
	<!--#########################################################################################-->
	<loggingConfiguration name="Logging Application Block" tracingEnabled="true" defaultCategory="General" logWarningsWhenNoCategoriesMatch="true">
		<listeners>
			<add fileName=".\Logs\ServicesDebug.log" footer="" formatter="Compact Text Formatter" header="" rollFileExistsBehavior="Overwrite" rollInterval="Day" rollSizeKB="0" timeStampPattern="yyyy-MM-dd" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" traceOutputOptions="None" filter="All" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="Debug Service Rolling Flat File Trace Listener"/>
			<add fileName=".\Logs\Services.log" footer="" formatter="Compact Text Formatter" header="" rollFileExistsBehavior="Overwrite" rollInterval="None" rollSizeKB="0" timeStampPattern="yyyy-MM-dd" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" traceOutputOptions="None" filter="All" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="Service Rolling Flat File Trace Listener"/>
			<add fileName=".\Logs\Silverlight.log" footer="" formatter="Compact Text Formatter" header="" rollFileExistsBehavior="Overwrite" rollInterval="Day" rollSizeKB="0" timeStampPattern="yyyy-MM-dd" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" traceOutputOptions="None" filter="All" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="Silverlight Rolling Flat File Trace Listener"/>
		</listeners>
		<formatters>
			<add template="[{timestamp}] Category: {category}{tab}| Severity: {severity}{tab}| Thread #{win32ThreadId}{tab}| Machine: {machine}&#xA;  {message}&#xA;-----------------------------------------------------------------------------------------------------------------------" type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="Compact Text Formatter"/>
			<add template="Timestamp: {timestamp}&#xA;Message: {message}&#xA;Category: {category}&#xA;Title:{title}&#xA;EventId: {eventid}&#xA;Priority: {priority}, Severity: {severity}&#xA;Machine: {machine}&#xA;Application Domain: {appDomain}&#xA;Process Id: {processId}, Name: {processName}&#xA;Win32 Thread Id: {win32ThreadId}, Name: {threadName}&#xA;Extended Properties: {dictionary({key} - {value}&#xA;----------------------------------------{newline}&#xA;)}" type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="Detailed Text Formatter"/>
		</formatters>
		<categorySources>
			<add switchValue="All" name="Client.Error">
				<listeners>
					<add name="Silverlight Rolling Flat File Trace Listener"/>
				</listeners>
			</add>
			<add switchValue="All" name="General">
				<listeners>
					<add name="Service Rolling Flat File Trace Listener"/>
				</listeners>
			</add>
			<add switchValue="All" name="Server.Debug">
				<listeners>
					<add name="Debug Service Rolling Flat File Trace Listener"/>
				</listeners>
			</add>
		</categorySources>
		<specialSources>
			<allEvents switchValue="All" name="All Events"/>
			<notProcessed switchValue="All" name="Unprocessed Category"/>
			<errors switchValue="All" name="Logging Errors &amp; Warnings"/>
		</specialSources>
	</loggingConfiguration>
	<exceptionHandling>
		<exceptionPolicies>
			<add name="Web UI Exception Policy">
				<exceptionTypes>
					<add type="System.Exception, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="NotifyRethrow" name="Exception">
						<exceptionHandlers>
							<add logCategory="General" eventId="100" severity="Error" title="Enterprise Library Exception Handling" formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" priority="0" useDefaultLogger="false" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="Logging Handler"/>
						</exceptionHandlers>
					</add>
				</exceptionTypes>
			</add>
		</exceptionPolicies>
	</exceptionHandling>
	<dataConfiguration defaultDatabase="AdventureWorks2008"/>
    <system.diagnostics>
        <switches>
            <!--TraceSwitch values: None (0), Error (1), Warning (2), Info (3) and Verbose(4)-->
            <add name="EventLogSwitchStrategy" value="4"/>
        </switches>
        <!--DEBUG Uncomment this section to log full WCF activity in external .svclog file in case of execution problem-->
        <sources>
            <source name="System.ServiceModel" propagateActivity="true" switchValue="All">
                <listeners>
                    <add name="sdt" type="System.Diagnostics.XmlWriterTraceListener" initializeData="C:\Temp\HappyNet.svclog"/>
                    <add name="eventLog" type="System.Diagnostics.EventLogTraceListener" initializeData="Application"/>
                </listeners>
            </source>
        </sources>
    </system.diagnostics>
  <connectionStrings>
      <!-- /!\ INSTALL NOTE /!\ Fill in the correct configuration to access your database -->
      <add name="AdventureWorks2008" connectionString="Database=AdventureWorks2008;Server=MyServer;Integrated Security=False;User ID=Username;Password=Password"
        providerName="System.Data.SqlClient" />
      <!-- /!\ INSTALL NOTE /!\ Fill in the correct configuration to access your database -->
      <!-- Entity Framework -->
      <add name="AdventureWorksModel" connectionString="metadata=res://*/EntitiesModel.csdl|res://*/EntitiesModel.ssdl|res://*/EntitiesModel.msl;provider=System.Data.SqlClient;provider connection string=&quot;Database=AdventureWorks2008;Server=MyServer;Integrated Security=False;MultipleActiveResultSets=True;User ID=Username;Password=Password&quot;" providerName="System.Data.EntityClient" />
  </connectionStrings>
	<appSettings>
		<add key="PageMappingsXmlPath" value="~/App_Data/PageMappings.xml"/>
	</appSettings>
	<!--#########################################################################################-->
	<!-- Section de configuration pour les chaines de connexion aux bases de donnÃ©es -->
	<!--#########################################################################################-->
	<!--#########################################################################################-->
	<!-- Section de configuration pour  l'application Web -->
	<!--#########################################################################################-->
	<system.web>
		<!-- 
            Set compilation debug="true" to insert debugging 
            symbols into the compiled page. Because this 
            affects performance, set this value to true only 
            during development.
        -->
		<compilation debug="true" targetFramework="4.0">
		</compilation>
		<!--
            The <authentication> section enables configuration 
            of the security authentication mode used by 
            ASP.NET to identify an incoming user. 
        -->
		<authentication mode="Forms"/>
		<!--<authorization>
          <deny users="?" />
      </authorization>-->
		<!--<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="15">
          <providers>
              <clear />
              <add
                name="SqlProvider"
                type="System.Web.Security.SqlMembershipProvider"
                connectionStringName="MySqlConnection"
                applicationName="MyApplication"
                enablePasswordRetrieval="false"
                enablePasswordReset="true"
                requiresQuestionAndAnswer="true"
                requiresUniqueEmail="true"
                passwordFormat="Hashed" />
          </providers>
      </membership>-->
		<!--
            The <customErrors> section enables configuration 
            of what to do if/when an unhandled error occurs 
            during the execution of a request. Specifically, 
            it enables developers to configure html error pages 
            to be displayed in place of a error stack trace.

        <customErrors mode="RemoteOnly" defaultRedirect="GenericErrorPage.htm">
            <error statusCode="403" redirect="NoAccess.htm" />
            <error statusCode="404" redirect="FileNotFound.htm" />
        </customErrors>
        -->
		<pages controlRenderingCompatibilityVersion="3.5" clientIDMode="AutoID"/></system.web>
	<!-- 
        The system.webServer section is required for running ASP.NET AJAX under Internet
        Information Services 7.0.  It is not necessary for previous version of IIS.
    -->
	<!--#########################################################################################-->
	<!-- Section de configuration Unity-->
	<!--#########################################################################################-->
	<unity>
		<typeAliases>
			<!-- SalesOrder -->
			<typeAlias alias="ISalesOrderDataProvider" type="Soat.HappyNet.Server.Services.SalesOrder.DataAccessLayer.ISalesOrderDataProvider,Soat.HappyNet.Server.Services.SalesOrder"/>
			<typeAlias alias="SalesOrderDataProvider" type="Soat.HappyNet.Server.Services.SalesOrder.DataAccessLayer.SalesOrderDataProvider, Soat.HappyNet.Server.Services.SalesOrder"/>
			<typeAlias alias="ISalesOrderBusinessProvider" type="Soat.HappyNet.Server.Services.SalesOrder.BusinessLayer.ISalesOrderBusinessProvider, Soat.HappyNet.Server.Services.SalesOrder"/>
			<typeAlias alias="SalesOrderBusinessProvider" type="Soat.HappyNet.Server.Services.SalesOrder.BusinessLayer.SalesOrderBusinessProvider, Soat.HappyNet.Server.Services.SalesOrder"/>
			<typeAlias alias="ISalesOrderBusinessProvider" type="Soat.HappyNet.Server.Services.SalesOrder.BusinessLayer.ISalesOrderBusinessProvider, Soat.HappyNet.Server.Services.SalesOrder"/>
			<typeAlias alias="SalesOrderBusinessProvider" type="Soat.HappyNet.Server.Services.SalesOrder.BusinessLayer.SalesOrderBusinessProvider, Soat.HappyNet.Server.Services.SalesOrder"/>
			<typeAlias alias="MockSalesOrderDataProvider" type="Soat.HappyNet.Server.Tests.SalesOrder.MockProviders.MockSalesOrderDataProvider,Soat.HappyNet.Server.Tests.SalesOrder"/>
			<!-- HumanResources -->
			<typeAlias alias="IHumanResourcesDataProvider" type="Soat.HappyNet.Server.Services.HumanResources.DataAccessLayer.IHumanResourcesDataProvider, Soat.HappyNet.Server.Services.HumanResources"/>
			<typeAlias alias="HumanResourcesDataProvider" type="Soat.HappyNet.Server.Services.HumanResources.DataAccessLayer.HumanResourcesDataProvider, Soat.HappyNet.Server.Services.HumanResources"/>
			<typeAlias alias="IHumanResourcesBusinessProvider" type="Soat.HappyNet.Server.Services.HumanResources.BusinessLayer.IHumanResourcesBusinessProvider, Soat.HappyNet.Server.Services.HumanResources"/>
			<typeAlias alias="HumanResourcesBusinessProvider" type="Soat.HappyNet.Server.Services.HumanResources.BusinessLayer.HumanResourcesBusinessProvider, Soat.HappyNet.Server.Services.HumanResources"/>
			<!-- ProductionService -->
			<typeAlias alias="IProductionDataProvider" type="Soat.HappyNet.Server.Services.Production.DataAccessLayer.IProductionDataProvider, Soat.HappyNet.Server.Services.Production"/>
			<typeAlias alias="ProductionDataProvider" type="Soat.HappyNet.Server.Services.Production.DataAccessLayer.ProductionDataProvider, Soat.HappyNet.Server.Services.Production"/>
			<typeAlias alias="IProductionBusinessProvider" type="Soat.HappyNet.Server.Services.Production.BusinessLayer.IProductionBusinessProvider, Soat.HappyNet.Server.Services.Production"/>
			<typeAlias alias="ProductionBusinessProvider" type="Soat.HappyNet.Server.Services.Production.BusinessLayer.ProductionBusinessProvider, Soat.HappyNet.Server.Services.Production"/>
			<!-- AuthenticationSerivce -->
			<typeAlias alias="IAuthenticationDataProvider" type="Soat.HappyNet.Server.Services.Authentication.DataAccessLayer.IPersonDataProvider, Soat.HappyNet.Server.Services.Authentication"/>
			<typeAlias alias="AuthenticationDataProvider" type="Soat.HappyNet.Server.Services.Authentication.DataAccessLayer.PersonDataProvider, Soat.HappyNet.Server.Services.Authentication"/>
			<typeAlias alias="IAuthenticationBusinessProvider" type="Soat.HappyNet.Server.Services.Authentication.BusinessLayer.IPersonBusinessProvider, Soat.HappyNet.Server.Services.Authentication"/>
			<typeAlias alias="AuthenticationBusinessProvider" type="Soat.HappyNet.Server.Services.Authentication.BusinessLayer.PersonBusinessProvider, Soat.HappyNet.Server.Services.Authentication"/>
			<!-- Orders -->
			<typeAlias alias="IOrdersDataProvider" type="Soat.HappyNet.Server.Services.Orders.DataAccessLayer.IOrdersDataProvider, Soat.HappyNet.Server.Services.Orders"/>
			<typeAlias alias="OrdersDataProvider" type="Soat.HappyNet.Server.Services.Orders.DataAccessLayer.OrdersDataProvider, Soat.HappyNet.Server.Services.Orders"/>
			<typeAlias alias="IOrdersBusinessProvider" type="Soat.HappyNet.Server.Services.Orders.BusinessLayer.IOrdersBusinessProvider, Soat.HappyNet.Server.Services.Orders"/>
			<typeAlias alias="OrdersBusinessProvider" type="Soat.HappyNet.Server.Services.Orders.BusinessLayer.OrdersBusinessProvider, Soat.HappyNet.Server.Services.Orders"/>
		</typeAliases>
		<containers>
			<container name="salesOrderServiceContainer">
				<types>
					<type type="ISalesOrderDataProvider" mapTo="MockSalesOrderDataProvider"/>
					<type type="ISalesOrderBusinessProvider" mapTo="SalesOrderBusinessProvider"/>
				</types>
			</container>
			<container name="humanResourcesContainer">
				<types>
					<type type="IHumanResourcesDataProvider" mapTo="HumanResourcesDataProvider"/>
					<type type="IHumanResourcesBusinessProvider" mapTo="HumanResourcesBusinessProvider"/>
				</types>
			</container>
			<container name="productionServiceContainer">
				<types>
					<type type="IProductionDataProvider" mapTo="ProductionDataProvider"/>
					<type type="IProductionBusinessProvider" mapTo="ProductionBusinessProvider"/>
				</types>
			</container>
			<container name="authenticationServiceContainer">
				<types>
					<type type="IAuthenticationDataProvider" mapTo="AuthenticationDataProvider"/>
					<type type="IAuthenticationBusinessProvider" mapTo="AuthenticationBusinessProvider"/>
				</types>
			</container>
			<container name="ordersServiceContainer">
				<types>
					<type type="IOrdersDataProvider" mapTo="OrdersDataProvider"/>
					<type type="IOrdersBusinessProvider" mapTo="OrdersBusinessProvider"/>
				</types>
			</container>
		</containers>
	</unity>
	<!--<system.web.extensions>
        <scripting>
            <webServices>
                 --><!--SSL requis en prod !--><!-- 
                <authenticationService enabled="true" requireSSL="false"/>
            </webServices>
        </scripting>
    </system.web.extensions>-->
	<!--#########################################################################################-->
	<!-- Section de configuration des Services WCF -->
	<!-- When deploying the service library project, the content of the config file must be added to the host's  app.config file. System.Configuration does not support config files for libraries. -->
	<!--#########################################################################################-->
	<system.serviceModel>
        <diagnostics>
            <messageLogging logMalformedMessages="true" logMessagesAtTransportLevel="true"/>
        </diagnostics>
        <bindings>
			<customBinding>
				<binding name="customBinding">
					<binaryMessageEncoding/>
					<httpTransport/>
				</binding>
			</customBinding>
			<basicHttpBinding>
				<binding name="userHttp">
					<!-- you would actually want to use a real security mode in a production env -->
					<security mode="None"/>
				</binding>
			</basicHttpBinding>
		</bindings>
		<serviceHostingEnvironment aspNetCompatibilityEnabled="true"/>
		<extensions>
			<behaviorExtensions>
				<add name="silverlightFaults" type="Soat.HappyNet.Server.Common.FaultBehavior.SilverlightFaultBehavior, Soat.HappyNet.Server.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
			</behaviorExtensions>
		</extensions>
		<behaviors>
			<!--###############################################################################################################-->
			<!--Ajout de l'extension pour la gestion des Faults WCF-->
			<!--###############################################################################################################-->
            <endpointBehaviors>
                <behavior name="SilverlightFaultBehavior">
                    <!--<silverlightFaults/>-->
                </behavior>
            </endpointBehaviors>
			<serviceBehaviors>
				<behavior name="CommonServiceBehavior">
					<serviceMetadata httpGetEnabled="true"/>
					<serviceDebug includeExceptionDetailInFaults="true"/>
				</behavior>
			</serviceBehaviors>
		</behaviors>
		<services>
			<service behaviorConfiguration="CommonServiceBehavior" name="Soat.HappyNet.Server.Services.HumanResources.HumanResourcesService">
				<endpoint address="" behaviorConfiguration="SilverlightFaultBehavior" binding="basicHttpBinding" bindingConfiguration=""
                          name="basicHttpBindingEndPoint" contract="Soat.HappyNet.Server.Services.HumanResources.IHumanResourcesService">
					<identity>
						<dns value="localhost"/>
					</identity>
				</endpoint>
				<endpoint address="mex" binding="mexHttpBinding" name="mexHttpBindingEndPoint" contract="IMetadataExchange"/>
			</service>
			<service behaviorConfiguration="CommonServiceBehavior" name="Soat.HappyNet.Server.Services.SalesOrder.SalesOrderService">
				<endpoint address="" behaviorConfiguration="SilverlightFaultBehavior" binding="basicHttpBinding" bindingConfiguration=""
                          name="basicHttpBindingEndPoint" contract="Soat.HappyNet.Server.Services.SalesOrder.ISalesOrderService">
					<identity>
						<dns value="localhost"/>
					</identity>
				</endpoint>
				<endpoint address="mex" binding="mexHttpBinding" name="mexHttpBindingEndPoint" contract="IMetadataExchange"/>
			</service>
			<service behaviorConfiguration="CommonServiceBehavior" name="Soat.HappyNet.Server.Services.Production.ProductionService">
				<endpoint address="" behaviorConfiguration="SilverlightFaultBehavior" binding="basicHttpBinding" bindingConfiguration=""
                          name="basicHttpBindingEndPoint" contract="Soat.HappyNet.Server.Services.Production.IProductionService">
					<identity>
						<dns value="localhost"/>
					</identity>
				</endpoint>
				<endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
			</service>
			<service behaviorConfiguration="CommonServiceBehavior" name="Soat.HappyNet.Server.Services.Logging.LoggingService">
				<endpoint address="" behaviorConfiguration="SilverlightFaultBehavior" binding="basicHttpBinding" bindingConfiguration=""
                          name="basicHttpBindingEndPoint" contract="Soat.HappyNet.Server.Services.Logging.ILoggingService">
					<identity>
						<dns value="localhost"/>
					</identity>
				</endpoint>
				<endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
			</service>
			<service behaviorConfiguration="CommonServiceBehavior" name="Soat.HappyNet.Server.Services.Authentication.PersonService">
				<endpoint address="" behaviorConfiguration="SilverlightFaultBehavior" binding="basicHttpBinding" bindingConfiguration=""
                          name="basicHttpBindingEndPoint" contract="Soat.HappyNet.Server.Services.Authentication.IPersonService">
					<identity>
						<dns value="localhost"/>
					</identity>
				</endpoint>
				<endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
			</service>
			<service behaviorConfiguration="CommonServiceBehavior" name="Soat.HappyNet.Server.Services.Orders.OrdersService">
				<endpoint address="" behaviorConfiguration="SilverlightFaultBehavior" binding="basicHttpBinding" bindingConfiguration=""
                          name="basicHttpBindingEndPoint" contract="Soat.HappyNet.Server.Services.Orders.IOrdersService">
					<identity>
						<dns value="localhost"/>
					</identity>
				</endpoint>
				<endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
			</service>
		</services>
	</system.serviceModel>
</configuration>
