//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace Soat.HappyNet.Silverlight.Modules.Logging.LoggingServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LoggingServiceReference.ILoggingService")]
    public interface ILoggingService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/ILoggingService/WriteMessage")]
        System.IAsyncResult BeginWriteMessage(string message, System.AsyncCallback callback, object asyncState);
        
        void EndWriteMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/ILoggingService/WriteErrorMessage")]
        System.IAsyncResult BeginWriteErrorMessage(string errorMessage, System.AsyncCallback callback, object asyncState);
        
        void EndWriteErrorMessage(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoggingServiceChannel : Soat.HappyNet.Silverlight.Modules.Logging.LoggingServiceReference.ILoggingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoggingServiceClient : System.ServiceModel.ClientBase<Soat.HappyNet.Silverlight.Modules.Logging.LoggingServiceReference.ILoggingService>, Soat.HappyNet.Silverlight.Modules.Logging.LoggingServiceReference.ILoggingService {
        
        private BeginOperationDelegate onBeginWriteMessageDelegate;
        
        private EndOperationDelegate onEndWriteMessageDelegate;
        
        private System.Threading.SendOrPostCallback onWriteMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginWriteErrorMessageDelegate;
        
        private EndOperationDelegate onEndWriteErrorMessageDelegate;
        
        private System.Threading.SendOrPostCallback onWriteErrorMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public LoggingServiceClient() {
        }
        
        public LoggingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LoggingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoggingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoggingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> WriteMessageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> WriteErrorMessageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Soat.HappyNet.Silverlight.Modules.Logging.LoggingServiceReference.ILoggingService.BeginWriteMessage(string message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginWriteMessage(message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Soat.HappyNet.Silverlight.Modules.Logging.LoggingServiceReference.ILoggingService.EndWriteMessage(System.IAsyncResult result) {
            base.Channel.EndWriteMessage(result);
        }
        
        private System.IAsyncResult OnBeginWriteMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string message = ((string)(inValues[0]));
            return ((Soat.HappyNet.Silverlight.Modules.Logging.LoggingServiceReference.ILoggingService)(this)).BeginWriteMessage(message, callback, asyncState);
        }
        
        private object[] OnEndWriteMessage(System.IAsyncResult result) {
            ((Soat.HappyNet.Silverlight.Modules.Logging.LoggingServiceReference.ILoggingService)(this)).EndWriteMessage(result);
            return null;
        }
        
        private void OnWriteMessageCompleted(object state) {
            if ((this.WriteMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.WriteMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void WriteMessageAsync(string message) {
            this.WriteMessageAsync(message, null);
        }
        
        public void WriteMessageAsync(string message, object userState) {
            if ((this.onBeginWriteMessageDelegate == null)) {
                this.onBeginWriteMessageDelegate = new BeginOperationDelegate(this.OnBeginWriteMessage);
            }
            if ((this.onEndWriteMessageDelegate == null)) {
                this.onEndWriteMessageDelegate = new EndOperationDelegate(this.OnEndWriteMessage);
            }
            if ((this.onWriteMessageCompletedDelegate == null)) {
                this.onWriteMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnWriteMessageCompleted);
            }
            base.InvokeAsync(this.onBeginWriteMessageDelegate, new object[] {
                        message}, this.onEndWriteMessageDelegate, this.onWriteMessageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Soat.HappyNet.Silverlight.Modules.Logging.LoggingServiceReference.ILoggingService.BeginWriteErrorMessage(string errorMessage, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginWriteErrorMessage(errorMessage, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Soat.HappyNet.Silverlight.Modules.Logging.LoggingServiceReference.ILoggingService.EndWriteErrorMessage(System.IAsyncResult result) {
            base.Channel.EndWriteErrorMessage(result);
        }
        
        private System.IAsyncResult OnBeginWriteErrorMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string errorMessage = ((string)(inValues[0]));
            return ((Soat.HappyNet.Silverlight.Modules.Logging.LoggingServiceReference.ILoggingService)(this)).BeginWriteErrorMessage(errorMessage, callback, asyncState);
        }
        
        private object[] OnEndWriteErrorMessage(System.IAsyncResult result) {
            ((Soat.HappyNet.Silverlight.Modules.Logging.LoggingServiceReference.ILoggingService)(this)).EndWriteErrorMessage(result);
            return null;
        }
        
        private void OnWriteErrorMessageCompleted(object state) {
            if ((this.WriteErrorMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.WriteErrorMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void WriteErrorMessageAsync(string errorMessage) {
            this.WriteErrorMessageAsync(errorMessage, null);
        }
        
        public void WriteErrorMessageAsync(string errorMessage, object userState) {
            if ((this.onBeginWriteErrorMessageDelegate == null)) {
                this.onBeginWriteErrorMessageDelegate = new BeginOperationDelegate(this.OnBeginWriteErrorMessage);
            }
            if ((this.onEndWriteErrorMessageDelegate == null)) {
                this.onEndWriteErrorMessageDelegate = new EndOperationDelegate(this.OnEndWriteErrorMessage);
            }
            if ((this.onWriteErrorMessageCompletedDelegate == null)) {
                this.onWriteErrorMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnWriteErrorMessageCompleted);
            }
            base.InvokeAsync(this.onBeginWriteErrorMessageDelegate, new object[] {
                        errorMessage}, this.onEndWriteErrorMessageDelegate, this.onWriteErrorMessageCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Soat.HappyNet.Silverlight.Modules.Logging.LoggingServiceReference.ILoggingService CreateChannel() {
            return new LoggingServiceClientChannel(this);
        }
        
        private class LoggingServiceClientChannel : ChannelBase<Soat.HappyNet.Silverlight.Modules.Logging.LoggingServiceReference.ILoggingService>, Soat.HappyNet.Silverlight.Modules.Logging.LoggingServiceReference.ILoggingService {
            
            public LoggingServiceClientChannel(System.ServiceModel.ClientBase<Soat.HappyNet.Silverlight.Modules.Logging.LoggingServiceReference.ILoggingService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginWriteMessage(string message, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = message;
                System.IAsyncResult _result = base.BeginInvoke("WriteMessage", _args, callback, asyncState);
                return _result;
            }
            
            public void EndWriteMessage(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("WriteMessage", _args, result);
            }
            
            public System.IAsyncResult BeginWriteErrorMessage(string errorMessage, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = errorMessage;
                System.IAsyncResult _result = base.BeginInvoke("WriteErrorMessage", _args, callback, asyncState);
                return _result;
            }
            
            public void EndWriteErrorMessage(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("WriteErrorMessage", _args, result);
            }
        }
    }
}
