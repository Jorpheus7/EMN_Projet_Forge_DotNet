//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace Soat.HappyNet.Silverlight.Modules.HumanResources.HumanResourcesServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HumanResourcesServiceReference.IHumanResourcesService")]
    public interface IHumanResourcesService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHumanResourcesService/FindAllEmployees", ReplyAction="http://tempuri.org/IHumanResourcesService/FindAllEmployeesResponse")]
        System.IAsyncResult BeginFindAllEmployees(int pageNumber, int pageSize, string sortColumnName, Soat.HappyNet.Server.DataContract.SortDirection sortDirection, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Soat.HappyNet.Server.DataContract.Employee> EndFindAllEmployees(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHumanResourcesServiceChannel : Soat.HappyNet.Silverlight.Modules.HumanResources.HumanResourcesServiceReference.IHumanResourcesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindAllEmployeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindAllEmployeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Soat.HappyNet.Server.DataContract.Employee> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Soat.HappyNet.Server.DataContract.Employee>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HumanResourcesServiceClient : System.ServiceModel.ClientBase<Soat.HappyNet.Silverlight.Modules.HumanResources.HumanResourcesServiceReference.IHumanResourcesService>, Soat.HappyNet.Silverlight.Modules.HumanResources.HumanResourcesServiceReference.IHumanResourcesService {
        
        private BeginOperationDelegate onBeginFindAllEmployeesDelegate;
        
        private EndOperationDelegate onEndFindAllEmployeesDelegate;
        
        private System.Threading.SendOrPostCallback onFindAllEmployeesCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public HumanResourcesServiceClient() {
        }
        
        public HumanResourcesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HumanResourcesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HumanResourcesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HumanResourcesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<FindAllEmployeesCompletedEventArgs> FindAllEmployeesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Soat.HappyNet.Silverlight.Modules.HumanResources.HumanResourcesServiceReference.IHumanResourcesService.BeginFindAllEmployees(int pageNumber, int pageSize, string sortColumnName, Soat.HappyNet.Server.DataContract.SortDirection sortDirection, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindAllEmployees(pageNumber, pageSize, sortColumnName, sortDirection, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Soat.HappyNet.Server.DataContract.Employee> Soat.HappyNet.Silverlight.Modules.HumanResources.HumanResourcesServiceReference.IHumanResourcesService.EndFindAllEmployees(System.IAsyncResult result) {
            return base.Channel.EndFindAllEmployees(result);
        }
        
        private System.IAsyncResult OnBeginFindAllEmployees(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int pageNumber = ((int)(inValues[0]));
            int pageSize = ((int)(inValues[1]));
            string sortColumnName = ((string)(inValues[2]));
            Soat.HappyNet.Server.DataContract.SortDirection sortDirection = ((Soat.HappyNet.Server.DataContract.SortDirection)(inValues[3]));
            return ((Soat.HappyNet.Silverlight.Modules.HumanResources.HumanResourcesServiceReference.IHumanResourcesService)(this)).BeginFindAllEmployees(pageNumber, pageSize, sortColumnName, sortDirection, callback, asyncState);
        }
        
        private object[] OnEndFindAllEmployees(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Soat.HappyNet.Server.DataContract.Employee> retVal = ((Soat.HappyNet.Silverlight.Modules.HumanResources.HumanResourcesServiceReference.IHumanResourcesService)(this)).EndFindAllEmployees(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindAllEmployeesCompleted(object state) {
            if ((this.FindAllEmployeesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindAllEmployeesCompleted(this, new FindAllEmployeesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindAllEmployeesAsync(int pageNumber, int pageSize, string sortColumnName, Soat.HappyNet.Server.DataContract.SortDirection sortDirection) {
            this.FindAllEmployeesAsync(pageNumber, pageSize, sortColumnName, sortDirection, null);
        }
        
        public void FindAllEmployeesAsync(int pageNumber, int pageSize, string sortColumnName, Soat.HappyNet.Server.DataContract.SortDirection sortDirection, object userState) {
            if ((this.onBeginFindAllEmployeesDelegate == null)) {
                this.onBeginFindAllEmployeesDelegate = new BeginOperationDelegate(this.OnBeginFindAllEmployees);
            }
            if ((this.onEndFindAllEmployeesDelegate == null)) {
                this.onEndFindAllEmployeesDelegate = new EndOperationDelegate(this.OnEndFindAllEmployees);
            }
            if ((this.onFindAllEmployeesCompletedDelegate == null)) {
                this.onFindAllEmployeesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindAllEmployeesCompleted);
            }
            base.InvokeAsync(this.onBeginFindAllEmployeesDelegate, new object[] {
                        pageNumber,
                        pageSize,
                        sortColumnName,
                        sortDirection}, this.onEndFindAllEmployeesDelegate, this.onFindAllEmployeesCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Soat.HappyNet.Silverlight.Modules.HumanResources.HumanResourcesServiceReference.IHumanResourcesService CreateChannel() {
            return new HumanResourcesServiceClientChannel(this);
        }
        
        private class HumanResourcesServiceClientChannel : ChannelBase<Soat.HappyNet.Silverlight.Modules.HumanResources.HumanResourcesServiceReference.IHumanResourcesService>, Soat.HappyNet.Silverlight.Modules.HumanResources.HumanResourcesServiceReference.IHumanResourcesService {
            
            public HumanResourcesServiceClientChannel(System.ServiceModel.ClientBase<Soat.HappyNet.Silverlight.Modules.HumanResources.HumanResourcesServiceReference.IHumanResourcesService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginFindAllEmployees(int pageNumber, int pageSize, string sortColumnName, Soat.HappyNet.Server.DataContract.SortDirection sortDirection, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = pageNumber;
                _args[1] = pageSize;
                _args[2] = sortColumnName;
                _args[3] = sortDirection;
                System.IAsyncResult _result = base.BeginInvoke("FindAllEmployees", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Soat.HappyNet.Server.DataContract.Employee> EndFindAllEmployees(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Soat.HappyNet.Server.DataContract.Employee> _result = ((System.Collections.ObjectModel.ObservableCollection<Soat.HappyNet.Server.DataContract.Employee>)(base.EndInvoke("FindAllEmployees", _args, result)));
                return _result;
            }
        }
    }
}
